import { Request, Response, Router } from "express";
import checkUser from "../../config/firebase";
import Booking from "../../models/booking";
import User from "../../models/user";
import Vehicle from "../../models/vehicle";

const router = Router();

const ACTIVE = "active";
const INACTIVE = "inactive";

/**
 * @swagger
 * /booking:
 *     get:
 *         summary: Retrieve all the videos in a paginated response.[made for PART 2 of BASIC REQUIREMENTS]
 *         parameters:
 *             - in: query
 *               name: limit
 *               type: integer
 *               description: max number of tweets to return. Default is 5.
 *             - in: query
 *               name: offset
 *               type: integer
 *               description: number of tweets to offset the results by. Default is 0.
 *             - in: query
 *               name: pageNo
 *               type: integer
 *               description: can be used with limit to get a paginated response
 *         responses:
 *             200:
 *                 description: A paginated list of videos
 */
router.post("/:uid/:vid", async (req: Request, res: Response) => {
  try {
    //check user, take id from there instead of route
    //check if id not null
    const { uid, vid } = req.params;
    const user = await User.findByPk(uid);
    const vehicle = await Vehicle.findByPk(vid);
    if (!vehicle || !user) throw new Error("err");
    const booking = await Booking.create({
      VehicleId: Number(vid),
      UserId: Number(uid),
      status: ACTIVE,
    });
    return res.status(201).send(booking);
  } catch (e) {
    return res.send(e);
  }
});

/**
 * @swagger
 * /api/getAll:
 *     get:
 *         summary: Retrieve all the videos in a paginated response.[made for PART 2 of BASIC REQUIREMENTS]
 *         parameters:
 *             - in: query
 *               name: limit
 *               type: integer
 *               description: max number of tweets to return. Default is 5.
 *             - in: query
 *               name: offset
 *               type: integer
 *               description: number of tweets to offset the results by. Default is 0.
 *             - in: query
 *               name: pageNo
 *               type: integer
 *               description: can be used with limit to get a paginated response
 *         responses:
 *             200:
 *                 description: A paginated list of videos
 */
router.patch("/:id/:sid", async (req: Request, res: Response) => {
  try {
    // qr code generated by admin
    // scanned and requested by user
    //add transaction
    const { id, sid } = req.params;
    if (!id || !sid) throw new Error("empty");
    const booking = await Booking.update(
      { status: INACTIVE },
      { where: { id } }
    );
    const vehicleID = (await Booking.findByPk(id))?.VehicleId;
    if (!vehicleID) throw new Error("err");
    const vehicle = await Vehicle.update(
      { stationID: Number(sid) },
      { where: { id: vehicleID } }
    );
    return res.status(201).send(booking);
  } catch (e) {
    return res.send(e);
  }
});

/**
 * @swagger
 * /api/getAll:
 *     get:
 *         summary: Retrieve all the videos in a paginated response.[made for PART 2 of BASIC REQUIREMENTS]
 *         parameters:
 *             - in: query
 *               name: limit
 *               type: integer
 *               description: max number of tweets to return. Default is 5.
 *             - in: query
 *               name: offset
 *               type: integer
 *               description: number of tweets to offset the results by. Default is 0.
 *             - in: query
 *               name: pageNo
 *               type: integer
 *               description: can be used with limit to get a paginated response
 *         responses:
 *             200:
 *                 description: A paginated list of videos
 */
router.get("/", async (req: Request, res: Response) => {
  try {
    //chck admin
    //joins
    return res.status(200).send(await Booking.findAll());
  } catch (e) {
    return res.send(e);
  }
});

router.get("/user", checkUser, async (req: Request, res: Response) => {
  try {
    //get phone from req
    //get id from phone
    //get bookings from id
  } catch (e) {
    return res.send(e);
  }
});

export default router;
